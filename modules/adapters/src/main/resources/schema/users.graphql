extend type Query {
    getUserInfo: UserInfoResponse!
    suggestedUsers(currentLat: Float!, currentLng: Float!, offset: Int): [UserSuggest]
    suggestedUsersWithFilter(currentLat: Float!, currentLng: Float!, offset: Int, categoryId: Int): [UserSuggest]
    blockedUsers: [UserData]
    getAllPurpose: GetAllPurposeResponse!
}


extend type Mutation {
    updateUserInfo(input: UpdateUserInfo): UserInfoResponse!
    blockUser(blockedUserId: String!): BlockUserResponse!
    unblockUser(blockedUserId: String!): BlockUserResponse!
    updateFcmTokenAndLocation(input: UpdateFcmTokenAndLocation!): UserInfoSuccessResponse!
    updateUserPurpose(purposeIds: [Int]!): GetAllPurposeResponse!
}

input UpdateUserInfo {
    fullName: String
    avatar: String
    email : String
    fcmNotificationToken: String
    dob: String
    bio: String
    major: Int
    grade: Int
    location: LocationUser
    hobbies: [Int]
    provider: String
}

input LocationUser {
    lat: String
    lng: String
}

union UserInfoResponse = UserInfoSuccessResponse | UserInfoFailedResponse

type UserInfoFailedResponse implements ResponseBase{
    status: StatusEnum!
    message: String!
}

type UserInfoSuccessResponse implements ResponseBase{
    message: String!
    status: StatusEnum!
    data: UserData
}

type UserData {
    userId: String!
    email: String!
    fullName: String!
    avatar: String
    provider: String!
    fcmNotificationToken: String
    dob : String
    bio : String
    major : Major
    grade : Grade
    location : Location
    hobbies : [Hobbies]
    pictures : [Pics]
    purpose : [PurposeResponse]
}

type Location {
    id : Int
    lat : String
    lng : String
}
type Hobbies {
    id : Int
    title : String
    iconUrl : String
}
type Pics{
    id : Int
    url : String
}
type Likes{
    id : Int
    currentUserId : String
    targetUserId : String
}


type UserSuggest {
    fcmId: String!
    fullName: String
    dob: String
    avatarUrl: String
    grade: Grade
    major: Major
    bio: String
    distance: Int
    commonHobbies: [Hobbie]
    purpose: [String]
}

type Grade {
    id: Int
    name: String
}

type Major {
    id: Int
    name: String
    iconUrl: String
}

type Hobbie {
    id: Int
    title: String
    iconUrl: String
}

type BlockUserResponse implements ResponseBase {
    status: StatusEnum!
    message: String!
}

input UpdateFcmTokenAndLocation {
    fcmNotificationToken: String
    location: LocationUser
}

type PurposeResponse {
    id: Int
    name: String
}
type GetAllPurposeResponse implements ResponseBase{
    status: StatusEnum!
    message: String!
    data: [PurposeResponse]
}

