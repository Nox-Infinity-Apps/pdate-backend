extend type Query {
    getUserInfo: UserInfoResponse!
    suggestedUsers(currentLat: Float!, currentLng: Float!, limit: Int, offset: Int): [UserSuggest]
}

union UserInfoResponse = UserInfoSuccessResponse | UserInfoFailedResponse

type UserInfoFailedResponse implements ResponseBase{
    status: StatusEnum!
    message: String!
}

type UserInfoSuccessResponse implements ResponseBase{
    message: String!
    status: StatusEnum!
    data: UserData
}

type UserData {
    userId: String!
}

type UserSuggest {
    fcmId: String!
    fullName: String
    dob: String
    avatarUrl: String
    grade: Grade
    major: Major
    bio: String
    distance: Int
    commonHobbies: [Hobbie]
}

type Grade {
    id: Int
    name: String
}

type Major {
    id: Int
    name: String
    iconUrl: String
}

type Hobbie {
    id: Int
    title: String
    iconUrl: String
}